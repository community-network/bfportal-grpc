syntax = "proto3";

package web.communitygames;

service CommunityGames {
    rpc createPlayground (CreatePlaygroundRequest) returns (CreatePlaygroundResponse) {} // current
    rpc updatePlayground (UpdatePlaygroundRequest) returns (UpdatePlaygroundResponse) {} // current
    rpc deletePlayground (DeletePlaygroundRequest) returns (DeletePlaygroundResponse) {} // current
    rpc getPlayground (GetPlaygroundRequest) returns (PlaygroundInfoResponse) {} // current
    rpc listPlaygroundsByOwner (ListPlaygroundsByOwnerRequest) returns (ListPlaygroundsByOwnerResponse) {} // current
    rpc getBlueprintsById (GetBlueprintsByIdRequest) returns (GetBlueprintsByIdResponse) {}
    rpc getScheduledBlueprints (GetScheduledBlueprintsRequest) returns (GetScheduledBlueprintsResponse) {} // current
    rpc getConstraints (GetConstraintsRequest) returns (GetConstraintsResponse) {} // current
    rpc sharePlayground (SharePlaygroundRequest) returns (SharePlaygroundResponse) {} // current
    rpc getProgressionTypes (GetProgressionTypesRequest) returns (GetProgressionTypesResponse) {} // current
}

enum Platform {
    UNKNOWN = 0;
    PC = 1;
    PS4 = 2;
    XBOXONE = 3;
    PS5 = 4;
    XBSX = 5;
    COMMON = 6;
}

enum InputMethods {
    ALL = 0;
    KEYBOARD_MOUSE = 1;
    GAME_CONTROLLER = 3;
}

enum IncludeFields {
    AVAILABLE_GAME_DATA = 0;
    METADATA = 1;
    CUSTOM_DATA = 2;
    CONSTRAINTS = 3;
    AVAILABLE_TAGS = 4;
}

enum State {
    ACTIVE = 0;
    ARCHIVED = 1;
}

enum Category {
    CATEGORY_UNKNOWN = 0;
    CATEGORY_MODE = 1;
    CATEGORY_PACKAGE = 2;
    CATEGORY_GENERAL = 3;
}

enum PhantomGameState {
    ENABLED = 0;
    DISABLED = 1;
}

enum CapacityType {
    AI_BACKFILL = 0;
    AI_STATIC = 1;
}

enum RotationBehavior {
    LOOP = 0;
    MATCHMAKE = 1;
    ONE_MAP = 2;
}

enum RoundBehavior {
    CONTINUE = 0;
}

enum BalancingMethod {
    UNSPECIFIED = 0;
    EVEN_NUMBERS = 1;
    EVEN_PERCENTAGE = 2;
    FILL_IN_TEAM_ORDER = 3;
}

message ProgressionEntry {
    string progressionMode = 1;
    repeated Mutator progressibles = 2;
}

message TranslationMetadata {
    string kind = 1;
    string translationId = 2;
}

message ResourceLocation {
    string ref = 1;
    string url = 2;
}

message Resource {
    ResourceLocation location = 1;
    string kind = 2;
}

message Metadata {
    repeated TranslationMetadata translations = 1;
    repeated Resource resources = 2;
}

message Tag {
    string id = 1;
    int32 sortOrder = 2;
    Metadata metadata = 3;
}

message ProgressionMode {
    string value = 1;
}

message PlaygroundResponse {
    Playground originalPlayground = 1;
    Playground validatedPlayground = 2;
    repeated Tag tag = 3;
    ProgressionMode progressionMode = 4;
}

message MapInfo {
    string mapname = 1;
    string mode = 2;
    uint32 gameSize = 3;
    uint32 rounds = 4;
    Mutator mutators = 5;
    string location = 6;
    uint32 preRoundSize = 7;
    uint32 warmUpSize = 8;
    uint32 allowedSpectators = 9;
}

message MapRotation {
    repeated MapInfo maps = 1;
    RotationBehavior rotationBehavior = 2;
    RoundBehavior roundBehavior = 3;
}

message TeamStructure {
    int32 teamId = 1;
    int32 capacity = 2;
}

message InternalTeamStructure {
    int32 teamId = 1;
    int32 capacity = 2;
    CapacityType capacityType = 3;
}

message MutatorSparseFloatEntry {
    uint32 index = 1;
    float value = 2;
}

message MutatorSparseFloat {
    float defaultValue = 1;
    uint32 size = 2;
    repeated MutatorSparseFloatEntry sparseValues = 3;
}

message MutatorFloat {
    float value = 1;
}

message MutatorBoolean {
    bool boolValue = 1;
}

message MutatorString {
    string stringValue = 1;
}

message MutatorInt {
    int32 value = 1;
}

message MutatorSparseBooleanEntry {
    uint32 index = 1;
    bool value = 2;
}

message MutatorSparseBoolean {
    bool defaultValue = 1;
    uint32 size = 2;
    repeated MutatorSparseBooleanEntry sparseValues = 3;
}

message SparseIntEntity {
    repeated int32 values = 1;
}

message MutatorSparseIntEntry {
    uint32 index = 1;
    int32 value = 2;
}

message MutatorSparseInt {
    int32 defaultValue = 1;
    uint32 size = 2;
    MutatorSparseIntEntry sparseValues = 3;
}

message MutatorKind {
    MutatorBoolean mutatorBoolean = 1;
    MutatorString mutatorString = 4;
    MutatorFloat mutatorFloat = 5;
    MutatorInt mutatorInt = 6;
    MutatorSparseBoolean mutatorSparseBoolean = 7;
    MutatorSparseInt mutatorSparseInt = 8;
    MutatorSparseFloat mutatorSparseFloat = 9;
}

message TeamComposition {
    TeamStructure teams = 1;
    repeated InternalTeamStructure internalTeams = 2;
    BalancingMethod balancingMethod = 3;
}

message Mutator { 
    string name = 1;
    string category = 2;
    MutatorKind kind = 3;
    string id = 4;
}

message Timestamp {
    int64 seconds = 1 [jstype=JS_STRING];
    int32 nanos = 2;
}

message StringValue {
    string value = 1;
}

message GameServerMessage {
    string kind = 1;
    string text = 2;
}

message GameServerSettings {
    string name = 1;
    StringValue description = 2;
    repeated GameServerMessage gameServerMessage = 3;
    StringValue configName = 4;
    StringValue ConfigDescription = 5;
    PhantomGameState phantomGameState = 6;
}

message PlayerInfo {
    uint64 nucleusId = 1 [jstype=JS_STRING];
    uint64 personaId = 2 [jstype=JS_STRING];
    Platform platformId = 3;
}

message PlatformRestrictions {
    repeated Platform platforms = 1;
}

message InputMethodResrictions {
    repeated InputMethods inputMethods = 1;
}

message Restrictions {
    PlatformRestrictions platformRestrictions = 1;
    InputMethodResrictions inputMethodResctrictions = 2;
}

message Compressed {
    bytes compiledModRules = 1;
    int32 rulesVersion = 2;
    int32 inflatedSize = 3;
}

message Uncompressed {
    bytes compiledModRules = 1;
    int32 rulesVersion = 2;
}

message CompiledRules {
    Uncompressed uncompressed = 1;
    Compressed compressed = 2;
}

message CompatibleModRules {
    bytes rules = 1;
    // bytes compiledOld = 2;
    int32 rulesVersion = 3;
    CompiledRules compiled = 4;
}

message InCompatibleModRules {
    bytes rules = 1;
    int32 rulesVersion = 2;
    int32 blueprintRulesVersion = 3;
}

message OriginalModRules {
    CompatibleModRules compatibleRules = 1;
    InCompatibleModRules incompatibleRules = 2;
}

message AssetCategoryTagBooleanOverride {
    repeated string assetCategoryTags = 1;
    bool value = 2;
}

message AssetCategoryTagBooleanTeamOverride {
    repeated string assetCategoryTags = 1;
    bool value = 2;
    uint32 teamId = 3;
}

message AssetCategoryBoolean {
    bool defaultValue = 1;
    AssetCategoryTagBooleanOverride overrides = 2;
    repeated AssetCategoryTagBooleanTeamOverride teamOverrides = 3;
}

message AssetCategory {
    string tagId = 1;
    AssetCategoryBoolean boolean = 2;
}

message Playground {
    string playgroundId = 1;
    string blueprintType = 3;
    string name = 4;
    string description = 5;
    repeated Mutator mutators = 6;
    MapRotation mapRotation = 7;
    State state = 8;
    string checksum = 9;
    string secret = 10;
    Timestamp createdAt = 11;
    Timestamp updatedAt = 12;
    GameServerSettings serverSettings = 13;
    PlayerInfo owner = 14;
    Restrictions restrictions = 15;
    OriginalModRules modRules = 16;
    repeated AssetCategory assetCategories = 17;
    TeamComposition teamComposition = 18;
}

message ListPlaygroundsByOwnerRequest {
    string blueprintType = 1;
}

message GetConstraintsRequest {
}

message GetBlueprintsByIdRequest {
    repeated string blueprintIds = 1;
    repeated IncludeFields includeFields = 2;
}

message GlobalConstraints {
    int32 maxPlaygroundsPerPlayer = 1;
    int32 maxGameServersPerPlayer = 2;
    int32 maxFollowedHostsListSize = 3;
}

message IntRange {
    int32 minValue = 1;
    int32 maxValue = 2;
}

message AvailableIntValues {
    IntRange range = 1;
    SparseIntEntity sparseValues = 2;
}

message AvailableIntValue {
    int32 defaultValue = 1;
    AvailableIntValues availableValues = 2;
}

message SparseFloatValues {
    repeated float values = 1;
}

message FloatRange {
    float minValue = 1;
    float maxValue = 2;
}

message AvailableFloatValues {
    FloatRange range = 1;
    SparseFloatValues sparseValues = 2;
}

message AvailableMutatorFloatValues {
    MutatorFloat mutator = 1;
    AvailableFloatValues availableValues = 2;
}

message AvailableMutatorIntValues {
    MutatorInt mutator = 1;
    AvailableIntValues availableValues = 2;
}

message AvailableMutatorSparseIntValues {
    MutatorSparseInt mutator = 1;
    AvailableIntValues availableValues = 2;
}

message AvailableMutatorSparseFloatValues {
    MutatorSparseFloat mutator = 1;
    AvailableFloatValues availableValues = 2;
}

message AvailableMutatorKind {
    MutatorBoolean mutatorBoolean = 1;
    MutatorString mutatorString = 4;
    AvailableMutatorFloatValues mutatorFloatValues = 7;
    AvailableMutatorIntValues mutatorIntValues = 8;
    MutatorSparseBoolean mutatorSparseBoolean = 9;
    AvailableMutatorSparseIntValues mutatorSparseIntValues = 10;
    AvailableMutatorSparseFloatValues mutatorSparseFloatValues = 11;
}

message AvailableMutator {
    string name = 1;
    string category = 2;
    AvailableMutatorKind kind = 3;
    Metadata metadata = 4;
    string id = 5;
}

message AvailableMapEntry {
    string levelName = 1;
    string gameMode = 2;
    string levelLocation = 3;
    AvailableIntValue gameSize = 4;
    AvailableIntValue rounds = 5;
    AvailableIntValue preRoundSize = 6;
    AvailableIntValue warmUpSize = 7;
    AvailableIntValue allowedSpectators = 8;
    repeated AvailableMutator mutators = 9;
    repeated Metadata metadata = 10;
}

message AvailableTag {
    string id = 1;
    Metadata metadata = 2;
    Category category = 3;
}

message AvailableAssetCategoryTag {
    string tagId = 1;
    string name = 2;
    repeated string childrenTags = 3;
    Metadata metadata = 4;
}

message AvailableAssetCategories {
    repeated AvailableAssetCategoryTag rootTags = 1;
    repeated AvailableAssetCategoryTag tags = 2;
}

message PlaygroundConstraints {
    int32 maxNameSize = 1;
    int32 maxDescriptionSize = 2;
    int32 maxSecretSize = 3;
    int32 maxMapsInRotation = 4;
    int32 maxMutators = 5;
    int32 maxConfigNameSize = 6;
    int32 maxConfigDescriptionSize = 7;
}

message ModRulesDefinition {
    int32 rulesVersion = 1;
    bytes modBuilder = 2;
}

message AvailableGameData {
    repeated AvailableMutator mutators = 1;
    repeated AvailableMapEntry maps = 2;
    ModRulesDefinition modRules = 4;
    AvailableAssetCategories assetCategories = 5;
}

message Blueprint {
    string blueprintType = 1;
    string name = 2;
    AvailableGameData availableGameData = 3;
    Metadata metadata = 4;
    bytes customData = 5;
    PlaygroundConstraints playgroundConstraints = 6;
    repeated AvailableTag availableTags = 7;
}
 
message ShortCode {
    string code = 1;
}

message GetProgressionTypesRequest {
}

message BlueprintInfo {
    string blueprintType = 1;
    string blueprintId = 2;
}

message GetProgressionTypesResponse {
    repeated ProgressionEntry entries = 1;
}

message GetScheduledBlueprintsRequest {
}

message GetScheduledBlueprintsResponse {
    BlueprintInfo blueprints = 1;
}

message GetBlueprintsByIdResponse {
    repeated Blueprint blueprint = 1;
}

message GetConstraintsResponse {
    GlobalConstraints globalConstraints = 1;
}

message ListPlaygroundsByOwnerResponse {
    repeated PlaygroundResponse playgroundResponses = 2;
}

message CreatePlaygroundRequest {
    string blueprintType = 2;
    string name = 3;
    StringValue description = 4;
    repeated Mutator mutators = 5;
    MapRotation mapRotation = 6;
    StringValue secret = 7;
    GameServerSettings serverSettings = 8;
    Restrictions restrictions = 9;
    bytes originalModRules = 10;
    repeated AssetCategory assetCategories = 11;
    TeamComposition teamComposition = 12;
}

message UpdatePlaygroundRequest {
    Playground newPlayground = 2;
}

message DeletePlaygroundRequest {
    string playgroundId = 1;
}

message GetPlaygroundRequest {
    string playgroundId = 2;
}

message SharePlaygroundRequest {
    string playgroundId = 1;
}

message SharePlaygroundResponse {
    ShortCode shortCode = 1;
}

message CreatePlaygroundResponse {
    PlaygroundResponse playgroundResponse = 2;
}

message UpdatePlaygroundResponse {
    PlaygroundResponse playgroundResponse = 2;
}

message DeletePlaygroundResponse {
}

message PlaygroundInfoResponse {
    PlaygroundResponse playground = 1;
}