// source: proto/reporting.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.web.reporting.Category', null, global);
goog.exportSymbol('proto.web.reporting.ReportPlaygroundRequest', null, global);
goog.exportSymbol('proto.web.reporting.ReportPlaygroundResponse', null, global);
goog.exportSymbol('proto.web.reporting.StringValue', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.web.reporting.StringValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.web.reporting.StringValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.web.reporting.StringValue.displayName = 'proto.web.reporting.StringValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.web.reporting.ReportPlaygroundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.web.reporting.ReportPlaygroundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.web.reporting.ReportPlaygroundRequest.displayName = 'proto.web.reporting.ReportPlaygroundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.web.reporting.ReportPlaygroundResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.web.reporting.ReportPlaygroundResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.web.reporting.ReportPlaygroundResponse.displayName = 'proto.web.reporting.ReportPlaygroundResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.web.reporting.StringValue.prototype.toObject = function(opt_includeInstance) {
  return proto.web.reporting.StringValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.web.reporting.StringValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.web.reporting.StringValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.web.reporting.StringValue}
 */
proto.web.reporting.StringValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.web.reporting.StringValue;
  return proto.web.reporting.StringValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.web.reporting.StringValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.web.reporting.StringValue}
 */
proto.web.reporting.StringValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.web.reporting.StringValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.web.reporting.StringValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.web.reporting.StringValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.web.reporting.StringValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.web.reporting.StringValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.web.reporting.StringValue} returns this
 */
proto.web.reporting.StringValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.web.reporting.ReportPlaygroundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.web.reporting.ReportPlaygroundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.web.reporting.ReportPlaygroundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    protocolversion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playgroundid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    category: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requesteremail: (f = msg.getRequesteremail()) && proto.web.reporting.StringValue.toObject(includeInstance, f),
    subject: (f = msg.getSubject()) && proto.web.reporting.StringValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.web.reporting.ReportPlaygroundRequest}
 */
proto.web.reporting.ReportPlaygroundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.web.reporting.ReportPlaygroundRequest;
  return proto.web.reporting.ReportPlaygroundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.web.reporting.ReportPlaygroundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.web.reporting.ReportPlaygroundRequest}
 */
proto.web.reporting.ReportPlaygroundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocolversion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaygroundid(value);
      break;
    case 3:
      var value = /** @type {!proto.web.reporting.Category} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    case 4:
      var value = new proto.web.reporting.StringValue;
      reader.readMessage(value,proto.web.reporting.StringValue.deserializeBinaryFromReader);
      msg.setRequesteremail(value);
      break;
    case 5:
      var value = new proto.web.reporting.StringValue;
      reader.readMessage(value,proto.web.reporting.StringValue.deserializeBinaryFromReader);
      msg.setSubject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.web.reporting.ReportPlaygroundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.web.reporting.ReportPlaygroundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.web.reporting.ReportPlaygroundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocolversion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaygroundid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequesteremail();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.web.reporting.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getSubject();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.web.reporting.StringValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string protocolVersion = 1;
 * @return {string}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.getProtocolversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.setProtocolversion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string playgroundId = 2;
 * @return {string}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.getPlaygroundid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.setPlaygroundid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Category category = 3;
 * @return {!proto.web.reporting.Category}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.getCategory = function() {
  return /** @type {!proto.web.reporting.Category} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.web.reporting.Category} value
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.setCategory = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional StringValue requesterEmail = 4;
 * @return {?proto.web.reporting.StringValue}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.getRequesteremail = function() {
  return /** @type{?proto.web.reporting.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.web.reporting.StringValue, 4));
};


/**
 * @param {?proto.web.reporting.StringValue|undefined} value
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
*/
proto.web.reporting.ReportPlaygroundRequest.prototype.setRequesteremail = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.clearRequesteremail = function() {
  return this.setRequesteremail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.hasRequesteremail = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringValue subject = 5;
 * @return {?proto.web.reporting.StringValue}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.getSubject = function() {
  return /** @type{?proto.web.reporting.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.web.reporting.StringValue, 5));
};


/**
 * @param {?proto.web.reporting.StringValue|undefined} value
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
*/
proto.web.reporting.ReportPlaygroundRequest.prototype.setSubject = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.web.reporting.ReportPlaygroundRequest} returns this
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.clearSubject = function() {
  return this.setSubject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.web.reporting.ReportPlaygroundRequest.prototype.hasSubject = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.web.reporting.ReportPlaygroundResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.web.reporting.ReportPlaygroundResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.web.reporting.ReportPlaygroundResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.web.reporting.ReportPlaygroundResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    petitionid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.web.reporting.ReportPlaygroundResponse}
 */
proto.web.reporting.ReportPlaygroundResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.web.reporting.ReportPlaygroundResponse;
  return proto.web.reporting.ReportPlaygroundResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.web.reporting.ReportPlaygroundResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.web.reporting.ReportPlaygroundResponse}
 */
proto.web.reporting.ReportPlaygroundResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPetitionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.web.reporting.ReportPlaygroundResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.web.reporting.ReportPlaygroundResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.web.reporting.ReportPlaygroundResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.web.reporting.ReportPlaygroundResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPetitionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string petitionId = 1;
 * @return {string}
 */
proto.web.reporting.ReportPlaygroundResponse.prototype.getPetitionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.web.reporting.ReportPlaygroundResponse} returns this
 */
proto.web.reporting.ReportPlaygroundResponse.prototype.setPetitionid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.web.reporting.Category = {
  UNKNOWN_CATEGORY: 0,
  CHEATING: 1,
  HARASSMENT: 2,
  SPAM: 3,
  PLAGIARISM: 4,
  HATE_SPEECH: 5,
  SEXUALLY_EXPLICIT: 6,
  CHILD_SOLICITATION: 7,
  TERRORIST_THREAT: 8,
  CLIENT_HACK: 9,
  SUICIDE_THREAT: 10,
  DOXING: 11,
  ADVERTISING: 12,
  INAPPROPRIATE: 13,
  VIOLENT: 14,
  OFFENSIVE: 15,
  OFFENSIVE_CHAT: 16,
  OFFENSIVE_NAME: 17
};

goog.object.extend(exports, proto.web.reporting);
